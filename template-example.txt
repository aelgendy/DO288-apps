
rkstation DO288-apps]$ oc describe template php-mysql-ephemeral -n ahmed-elgendy-common
Name:		php-mysql-ephemeral
Namespace:	ahmed-elgendy-common
Created:	3 minutes ago
Labels:		<none>
Description:	A  PHP application with a MySQL database.
		WARNING: Any data stored will be lost upon pod destruction. Only use this template for testing.
Annotations:	iconClass=icon-php
		openshift.io/display-name=PHP + MySQL (Ephemeral)
		tags=php
		template.openshift.io/long-description=This template defines resources needed to develop a PHP application, including a build configuration, application deployment configuration, and database deployment configuration.  The database is stored in non-persistent storage, so this configuration should be used for experimental purposes only.
		template.openshift.io/provider-display-name=Red Hat Training

Parameters:		 
    Name:		NAME
    Display Name:	Name
    Description:	The name assigned to all of the app objects defined in this template.
    Required:		true
    Value:		php-app

    Name:		NAMESPACE
    Display Name:	Namespace
    Description:	The OpenShift Namespace where the S2I biulder ImageStream resides.
    Required:		true
    Value:		openshift

    Name:		SOURCE_REPOSITORY_URL
    Display Name:	Git Repository URL
    Description:	The URL of the repository with your application source code.
    Required:		true
    Value:		<none>

    Name:		SOURCE_REPOSITORY_REF
    Display Name:	Git Reference
    Description:	Set this to a branch name, tag or other ref of your repository if you are not using the default branch.
    Required:		false
    Value:		<none>

    Name:		CONTEXT_DIR
    Display Name:	Context Directory
    Description:	Set this to the relative path to your project if it is not in the root of your repository.
    Required:		false
    Value:		<none>

    Name:		APPLICATION_DOMAIN
    Display Name:	Application Hostname
    Description:	The exposed hostname that will route to the PHP app service, if left blank a value will be defaulted.
    Required:		false
    Value:		<none>

    Name:		GITHUB_WEBHOOK_SECRET
    Display Name:	GitHub Webhook Secret
    Description:	Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
    Required:		false
    Generated:		expression
    From:		[a-zA-Z0-9]{40}

    Name:		DATABASE_SERVICE_NAME
    Display Name:	Database Service Name
    Required:		true
    Value:		mysql

    Name:		DATABASE_NAME
    Display Name:	Database Name
    Required:		true
    Value:		phpapp

    Name:		DATABASE_USER
    Display Name:	Database User
    Required:		true
    Value:		php

    Name:		DATABASE_PASSWORD
    Display Name:	Database Password
    Required:		false
    Generated:		expression
    From:		[a-zA-Z0-9]{16}


Object Labels:	template=php-mysql-ephemeral

Message:	The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.
		

Objects:		 
    Secret		${NAME}
    Service		${NAME}
    Route		${NAME}
    ImageStream		${NAME}
    BuildConfig		${NAME}
    DeploymentConfig	${NAME}
    Service		${DATABASE_SERVICE_NAME}
    DeploymentConfig	${DATABASE_SERVICE_NAME}
[student@workstation DO288-apps]$ 
[student@workstation DO288-apps]$ 
[student@workstation DO288-apps]$ 
[student@workstation DO288-apps]$ cat ~/DO288/labs/build-template/create-app.sh 
#!/bin/sh

source /usr/local/etc/ocp4.config

oc new-app  --as-deployment-config --template ${RHT_OCP4_DEV_USER}-common/php-mysql-ephemeral \
  -p NAME=quotesapi \
  -p APPLICATION_DOMAIN=quote-${RHT_OCP4_DEV_USER}.${RHT_OCP4_WILDCARD_DOMAIN} \
  -p SOURCE_REPOSITORY_URL=https://github.com/${RHT_OCP4_GITHUB_USER}/DO288-apps \
  -p CONTEXT_DIR=quotes \
  -p DATABASE_SERVICE_NAME=quotesdb \
  -p DATABASE_USER=user1 \
  -p DATABASE_PASSWORD=mypa55 \
  --name quotes

[student@workstation DO288-apps]$ oc new-
new-app      new-build    new-project  
[student@workstation DO288-apps]$ oc new-
new-app      new-build    new-project  
[student@workstation DO288-apps]$ oc new-app -h
Create a new application by specifying source code, templates, and/or images

 This command will try to build up the components of an application using images, templates, or code
that has a public repository. It will lookup the images on the local Docker installation (if
available), a container image registry, an integrated image stream, or stored templates.

 If you specify a source code URL, it will set up a build that takes your source code and converts
it into an image that can run inside of a pod. Local source must be in a git repository that has a
remote repository that the server can see. The images will be deployed via a deployment
configuration, and a service will be connected to the first public port of the app. You may either
specify components using the various existing flags or let new-app autodetect what kind of
components you have provided.

 If you provide source code, a new build will be automatically triggered. You can use 'oc status' to
check the progress.

Usage:
  oc new-app (IMAGE | IMAGESTREAM | TEMPLATE | PATH | URL ...) [flags]

Examples:
  # List all local templates and image streams that can be used to create an app
  oc new-app --list
  
  # Create an application based on the source code in the current git repository (with a public
remote) and a Docker image
  oc new-app . --docker-image=repo/langimage
  
  # Create an application myapp with Docker based build strategy expecting binary input
  oc new-app  --strategy=docker --binary --name myapp
  
  # Create a Ruby application based on the provided [image]~[source code] combination
  oc new-app centos/ruby-25-centos7~https://github.com/sclorg/ruby-ex.git
  
  # Use the public Docker Hub MySQL image to create an app. Generated artifacts will be labeled with
db=mysql
  oc new-app mysql MYSQL_USER=user MYSQL_PASSWORD=pass MYSQL_DATABASE=testdb -l db=mysql
  
  # Use a MySQL image in a private registry to create an app and override application artifacts'
names
  oc new-app --docker-image=myregistry.com/mycompany/mysql --name=private
  
  # Create an application from a remote repository using its beta4 branch
  oc new-app https://github.com/openshift/ruby-hello-world#beta4
  
  # Create an application based on a stored template, explicitly setting a parameter value
  oc new-app --template=ruby-helloworld-sample --param=MYSQL_USER=admin
  
  # Create an application from a remote repository and specify a context directory
  oc new-app https://github.com/youruser/yourgitrepo --context-dir=src/build
  
  # Create an application from a remote private repository and specify which existing secret to use
  oc new-app https://github.com/youruser/yourgitrepo --source-secret=yoursecret
  
  # Create an application based on a template file, explicitly setting a parameter value
  oc new-app --file=./example/myapp/template.json --param=MYSQL_USER=admin
  
  # Search all templates, image streams, and Docker images for the ones that match "ruby"
  oc new-app --search ruby
  
  # Search for "ruby", but only in stored templates (--template, --image-stream and --docker-image
  # can be used to filter search results)
  oc new-app --search --template=ruby
  
  # Search for "ruby" in stored templates and print the output as an YAML
  oc new-app --search --template=ruby --output=yaml

Options:
      --allow-missing-images=false: If true, indicates that referenced Docker images that cannot be
found locally or in a registry should still be used.
      --allow-missing-imagestream-tags=false: If true, indicates that image stream tags that don't
exist should still be used.
      --allow-missing-template-keys=false: If true, ignore any errors in templates when a field or
map key is missing in the template. Only applies to golang and jsonpath output formats.
      --as-deployment-config=false: If true create this application as a deployment config, which
allows for hooks and custom strategies.
      --as-test=false: If true create this application as a test deployment, which validates that
the deployment succeeds and then scales down.
      --binary=false: Instead of expecting a source URL, set the build to expect binary contents.
Will disable triggers.
      --build-env=[]: Specify a key-value pair for an environment vari
image.
      --build-env-file=[]: File containing key-value pairs of environment variables to set into each
build image.
      --code=[]: Source code to use to build this application.
      --context-dir='': Context directory to be used for the build.
      --docker-image=[]: Name of a Docker image to include in the app.
      --dry-run=false: If true, show the result of the operation without performing it.
  -e, --env=[]: Specify a key-value pair for an environment variable to set into each container.
      --env-file=[]: File containing key-value pairs of environment variables to set into each
container.
  -f, --file=[]: Path to a template file to use for the app.
      --grant-install-rights=false: If true, a component that requires access to your account may
use your token to install software into your project. Only grant images you trust the right to run
with your token.
      --group=[]: Indicate components that should be grouped together as <comp1>+<comp2>.
      --ignore-unknown-parameters=false: If true, will not stop processing if a provided parameter
does not exist in the template.
  -i, --image-stream=[]: Name of an image stream to use in the app.
      --insecure-registry=false: If true, indicates that the referenced Docker images are on
insecure registries and should bypass certificate checking
  -l, --labels='': Label to set in all resources for this application.
  -L, --list=false: List all local templates and image streams that can be used to create.
      --name='': Set name to use for generated application artifacts
      --no-install=false: Do not attempt to run images that describe themselves as being installable
  -o, --output='': Output format. One of:
json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
      --output-version='': The preferred API versions of the output objects
  -p, --param=[]: Specify a key-value pair (e.g., -p FOO=BAR) to set/override a parameter value in
the template.
      --param-file=[]: File containing parameter values to set/override in the template.
  -S, --search=false: Search all templates, image streams, and Docker images that match the
arguments provided.
  -a, --show-all=true: When printing, show all resources (false means hide terminated pods.)
      --show-labels=false: When printing, show all labels as the last column (default hide labels
column)
      --sort-by='': If non-empty, sort list types using this field specification.  The field
specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API
resource specified by this JSONPath expression must be an integer or a string.
      --source-secret='': The name of an existing secret that should be used for cloning a private
git repository.
      --strategy=: Specify the build strategy to use if you don't want to detect
(docker|pipeline|source). NOTICE: the pipeline strategy is deprecated; consider using Jenkinsfiles
directly on Jenkins or OpenShift Pipelines.
      --template=[]: Name of a stored template to use in the app.

Use "oc options" for a list of global command-line options (applies to all commands).
[student@workstation DO288-apps]$ 
[student@workstation DO288-apps]$ cat ~/DO288/labs/build-template/create-app.sh 
#!/bin/sh

source /usr/local/etc/ocp4.config

oc new-app  --as-deployment-config --template ${RHT_OCP4_DEV_USER}-common/php-mysql-ephemeral \
  -p NAME=quotesapi \
  -p APPLICATION_DOMAIN=quote-${RHT_OCP4_DEV_USER}.${RHT_OCP4_WILDCARD_DOMAIN} \
  -p SOURCE_REPOSITORY_URL=https://github.com/${RHT_OCP4_GITHUB_USER}/DO288-apps \
  -p CONTEXT_DIR=quotes \
  -p DATABASE_SERVICE_NAME=quotesdb \
  -p DATABASE_USER=user1 \
  -p DATABASE_PASSWORD=mypa55 \
  --name quotes

[student@workstation DO288-apps]$ ~/DO288/labs/build-template/create-app.sh 
--> Deploying template "ahmed-elgendy-common/php-mysql-ephemeral" for "ahmed-elgendy-common/php-mysql-ephemeral" to project ahmed-elgendy-build-template

     PHP + MySQL (Ephemeral)
     ---------
     A  PHP application with a MySQL database.
     WARNING: Any data stored will be lost upon pod destruction. Only use this template for testing.

     The following service(s) have been created in your project: quotesapi, quotesdb.

     * With parameters:
        * Name=quotesapi
        * Namespace=openshift
        * Git Repository URL=https://github.com/aelgendy/DO288-apps
        * Git Reference=
        * Context Directory=quotes
        * Application Hostname=quote-ahmed-elgendy.apps.eu45.prod.nextcle.com
        * GitHub Webhook Secret=11CEmd1mkyjAm0bXMfU3OrTInmxikLCt3ju8kOxF # generated
        * Database Service Name=quotesdb
        * Database Name=phpapp
        * Database User=user1
        * Database Password=mypa55

--> Creating resources ...
    secret "quotesapi" created
    service "quotesapi" created
    route.route.openshift.io "quotesapi" created
    imagestream.image.openshift.io "quotesapi" created
    buildconfig.build.openshift.io "quotesapi" created
    deploymentconfig.apps.openshift.io "quotesapi" created
    service "quotesdb" created
    deploymentconfig.apps.openshift.io "quotesdb" created
--> Success
    Access your application via route 'quote-ahmed-elgendy.apps.eu45.prod.nextcle.com' 
    Build scheduled, use 'oc logs -f bc/quotesapi' to track its progress.
    Run 'oc status' to view your app.
[student@workstation DO288-apps]$ cat ~/DO288/labs/build-template/create-app.sh 
#!/bin/sh

source /usr/local/etc/ocp4.config

oc new-app  --as-deployment-config --template ${RHT_OCP4_DEV_USER}-common/php-mysql-ephemeral \
  -p NAME=quotesapi \
  -p APPLICATION_DOMAIN=quote-${RHT_OCP4_DEV_USER}.${RHT_OCP4_WILDCARD_DOMAIN} \
  -p SOURCE_REPOSITORY_URL=https://github.com/${RHT_OCP4_GITHUB_USER}/DO288-apps \
  -p CONTEXT_DIR=quotes \
  -p DATABASE_SERVICE_NAME=quotesdb \
  -p DATABASE_USER=user1 \
  -p DATABASE_PASSWORD=mypa55 \
  --name quotes


